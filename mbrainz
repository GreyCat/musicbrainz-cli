#!/bin/sh -e

VERSION=0.1
: ${MBHOST:=test.musicbrainz.org}
: ${USER_AGENT:="MusicBrainzCLI/$VERSION"}

show_usage()
{
	cat <<__EOF__
Usage: ${0##*/} [options] <command>

Options:

Commands:
- ar <entity-type1> <entity-id1> <entity-type2> <entity-id2> <ar-type>
__EOF__
	exit 1
}

show_version()
{
	echo "MusicBrainz command line client, version $VERSION"
	exit 0
}

fail()
{
	echo "Error: $@"
	exit 1
}

query()
{
	wget \
		--load-cookies "$COOKIES" \
		--save-cookies "$COOKIES" \
		--keep-session-cookies \
		--user-agent "$USER_AGENT" \
		"$@"
}

check_login()
{
	if ! [ -r "$COOKIES" ]; then
		require_login
	elif ! egrep -q "^$MBHOST	FALSE	/	FALSE	[0-9]+	remember_login	" cookies.txt; then
		require_login
	fi
}

require_login()
{
	query \
		-O$MBTMP/p1.html \
		--post-data "username=$MBLOGIN&password=$MBPASSWORD&remember_me=1" \
		"http://$MBHOST/login"

	ERRORMSG=$(sed -ne '/span class="error"/ { s,^.*<span class="error">\(.*\)</span>,\1,;s,<[^>]*>,,g;p }' <$MBTMP/p1.html)
	if [ -n "$ERRORMSG" ]; then
		fail "$ERRORMSG"
	fi
}

validate_type()
{
	local t=$1
	case "$t" in
	work|recording|artist|release)
		;;
	*)
		fail "Invalid type: \"$t\""
	esac
}

validate_uuid()
{
	local uuid=$1
	if ! echo $uuid | egrep -q '^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'; then
		fail "Invalid entity UUID: \"$uuid\""
	fi
}

validate_ar_type()
{
	if [ "$TYPE0" = work -a "$TYPE1" = recording ]; then
		local t=$TYPE1
		TYPE1=$TYPE0
		TYPE0=$t
		t=$ID1
		ID1=$ID0
		ID0=$t
	fi

	case "${TYPE0}_${TYPE1}" in
	recording_work)
		case "$AR_TYPE" in
		medley)
			AR_TYPE_IDX=244
			;;
		performance)
			AR_TYPE_IDX=278
			;;
		*)
			fail "Unable to handle relationship type \"$AR_TYPE\""
		esac
		;;
	*)
		fail "Unable to handle type pair: $TYPE0 <=> $TYPE1"
	esac
}

create_ar()
{
	check_login
	local tries=0
	while [ "$tries" -lt 3 ]; do
		query \
			-O$MBTMP/p2.html \
			--post-data "ar.link_type_id=$AR_TYPE_IDX&ar.edit_note=$MESSAGE&ar.as_auto_editor=1" \
			"http://$MBHOST/edit/relationship/create?type1=${TYPE1}&entity1=${ID1}&entity0=${ID0}&type0=${TYPE0}"
		if grep -q '<strong>You need to be logged in to view this page.</strong>' $MBTMP/p2.html; then
			require_login
		elif grep -q 'Thank you, your edit has been entered into the edit queue for peer review.' $MBTMP/p2.html; then
			break
		else
			fail 'Unknown reply for /edit/relationship/create'
		fi
		tries=$(($tries + 1))
	done
}


MBTMP=.
COOKIES=$MBTMP/cookies.txt

# Parse command-line options
TEMP=$(getopt -n ${0##*/} -o h,V,m:,l:,p: -l help,version,message:,login:,password:,host: -- "$@") || show_usage
eval set -- "$TEMP"

while :; do
	case "$1" in
	-h|--help)
		show_usage
		;;
	-V|--version)
		show_version
		;;
	-m|--message)
		shift; MESSAGE=$1
		;;
	-l|--login)
		shift; MBLOGIN=$1
		;;
	-p|--password)
		shift; MBPASSWORD=$1
		;;
	--host)
		shift; MBHOST=$1
		;;
	--)
		# Normal end of arguments; always present if there were no
		# errors in option parsing
		shift; break
		;;
	*)
		fail "Internal error: getopt passed \"$1\", unable to handle"
		;;
	esac
	shift
done

# Parse commands
case "$1" in
login)
	shift
	require_login
	;;
ar)
	shift
	TYPE0=$1
	validate_type $TYPE0
	shift
	ID0=$1
	validate_uuid $ID0
	shift
	TYPE1=$1
	validate_type $TYPE1
	shift
	ID1=$1
	validate_uuid $ID1
	shift
	AR_TYPE=$1
	validate_ar_type $AR_TYPE
	shift
	create_ar
	;;
*)
	echo "Invalid command: \"$1\""
	show_usage
	;;
esac
